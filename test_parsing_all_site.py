from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.keys import Keys
from selenium.common.exceptions import WebDriverException, TimeoutException
from selenium.webdriver.support import expected_conditions as EC
import os
from time import time
import requests
import csv
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞ (–¥–ª—è Chrome)
driver = webdriver.Chrome()
#driver.maximize_window()
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome –≤ headless —Ä–µ–∂–∏–º–µ
options = Options()
options.add_argument("--headless")
options.add_argument("--no-sandbox")
options.add_argument("--disable-dev-shm-usage")

#driver = webdriver.Chrome(options=options)

start_time = time()

# –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–∞–π—Ç
driver.get("https://test.rozentalgroup.ru/demo/authorization/")

# –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—è –ª–æ–≥–∏–Ω–∞
wait = WebDriverWait(driver, 10)
username_input = wait.until(EC.presence_of_element_located((By.NAME, "login")))
password_input = driver.find_element(By.NAME, "password")

# –í–≤–æ–¥–∏–º –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å
username_input.send_keys(os.environ["login"])  # –í—Å—Ç–∞–≤—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
password_input.send_keys(os.environ["password"])  # –í—Å—Ç–∞–≤—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ

# –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
login_button = driver.find_element(By.CSS_SELECTOR, "button[type='submit']")
login_button.click()

# –ñ–¥—ë–º —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞/—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
wait.until(EC.url_changes("https://test.rozentalgroup.ru/demo/authorization/"))

# üîó –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–¥–∞–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∫–æ—Ä—Ç–µ–∂)
URLS = [
    "https://test.rozentalgroup.ru/demo/dispetcher/executors/",
    "https://test.rozentalgroup.ru/demo/dispetcher/executors/absence-schedule/",
    "https://test.rozentalgroup.ru/demo/dispetcher/users/",
    "https://test.rozentalgroup.ru/demo/dispetcher/handbook/companies/",
]

# üìÅ –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–æ–∫
CSV_FILE = "bad_links.csv"

# üßæ –•—Ä–∞–Ω–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
bad_pages = []

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram ===
BOT_TOKEN = os.getenv("bot_token")
CHAT_ID = os.getenv("chat_id")

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
def send_telegram_message(text):
    if not BOT_TOKEN or not CHAT_ID:
        print("[‚ö†Ô∏è] BOT_TOKEN –∏–ª–∏ CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã.")
        return
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {"chat_id": CHAT_ID, "text": text}
    try:
        response = requests.post(url, data=payload)
        if response.status_code != 200:
            print(f"[Telegram ‚ùå] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.text}")
    except Exception as e:
        print(f"[Telegram ‚ùó] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –≤ Telegram
def send_telegram_file(file_path, caption="–§–∞–π–ª"):
    if not BOT_TOKEN or not CHAT_ID:
        return
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendDocument"
    try:
        with open(file_path, "rb") as f:
            response = requests.post(
                url,
                data={"chat_id": CHAT_ID, "caption": caption},
                files={"document": f}
            )
        if response.status_code != 200:
            print(f"[Telegram ‚ùå] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {response.text}")
    except Exception as e:
        print(f"[Telegram ‚ùó] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö URL
for url in URLS:
    try:
        driver.get(url)
        if (
            "404" in driver.title or
            "–æ—à–∏–±–∫–∞" in driver.title.lower() or
            "not found" in driver.page_source.lower()
        ):
            bad_pages.append([url, "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ", "–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –≤ title/page"])
    except WebDriverException as e:
        bad_pages.append([url, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã", str(e)])

# –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ CSV
try:
    with open(CSV_FILE, mode="w", newline="", encoding="Windows-1251") as f:
        writer = csv.writer(f)
        writer.writerow(["URL", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏", "–¢–∏–ø –æ—à–∏–±–∫–∏"])
        writer.writerows(bad_pages)
except PermissionError:
    print(f"[‚ùó] –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É {CSV_FILE}. –ó–∞–∫—Ä–æ–π—Ç–µ –µ–≥–æ, –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç.")

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è Telegram
total_checked = len(URLS)
total_errors = len(bad_pages)
total_ok = total_checked - total_errors
duration = round(time() - start_time, 2)

summary = f"""‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞

‚è± –í—Ä–µ–º—è: {duration} —Å–µ–∫
üîó –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: {total_checked}
‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {total_ok}
‚ùå –û—à–∏–±–æ–∫: {total_errors}
"""

for i, (url, _, error_type) in enumerate(bad_pages[:10], start=1):
    summary += f"\n{i}. {url}\n   ‚õî {error_type}"

if total_errors > 10:
    summary += f"\n...–∏ –µ—â—ë {total_errors - 10} –æ—à–∏–±–æ–∫ —Å–∫—Ä—ã—Ç–æ."

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
send_telegram_message(summary)
if total_errors > 0:
    send_telegram_file(CSV_FILE, caption="üìÑ –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")

# –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
#input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")

driver.quit()

