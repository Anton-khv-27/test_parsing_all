from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.common.exceptions import WebDriverException
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
import os
from time import time
import requests
import csv
from dotenv import load_dotenv
import tempfile

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø—Ü–∏–π –¥–ª—è Chrome –≤ headless-—Ä–µ–∂–∏–º–µ
options = Options()
options.add_argument('--headless=new')
options.add_argument('--no-sandbox')
options.add_argument('--disable-dev-shm-usage')
options.add_argument('--window-size=1920,1080')

# –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏
service = Service("/usr/bin/chromedriver")  # –ø—É—Ç—å –≤ GitHub Actions
driver = webdriver.Chrome(service=service, options=options)
options.add_argument(f'--user-data-dir={tempfile.mkdtemp()}')

# –ó–∞–ø—É—Å–∫ –¥—Ä–∞–π–≤–µ—Ä–∞
driver = webdriver.Chrome(options=options)
start_time = time()

# –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–∞–π—Ç
driver.get("https://testing.rozentalgroup.ru/demo/authorization/")

# –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—è –ª–æ–≥–∏–Ω–∞
wait = WebDriverWait(driver, 10)
username_input = wait.until(EC.presence_of_element_located((By.NAME, "login")))
password_input = driver.find_element(By.NAME, "password")

# –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ Secrets
username_input.send_keys(os.environ["login"])
password_input.send_keys(os.environ["password"])
BOT_TOKEN = os.environ["BOT_TOKEN"]
CHAT_ID = os.environ["CHAT_ID"]

# –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
login_button = driver.find_element(By.CSS_SELECTOR, "button[type='submit']")
login_button.click()

# –ñ–¥—ë–º —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞/—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
wait.until(EC.url_changes("https://testing.rozentalgroup.ru/demo/authorization/"))

# üîó –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–¥–∞–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∫–æ—Ä—Ç–µ–∂)
URLS = [
    "https://dev.rozentalgroup.ru/demo/dispetcher/executors/",
    "https://dev.rozentalgroup.ru/demo/dispetcher/executors/absence-schedule/",
    "https://dev.rozentalgroup.ru/demo/dispetcher/users/",
    "https://dev.rozentalgroup.ru/demo/dispetcher/handbook/companies/",
    "https://dev.rozentalgroup.ru/demo/dispetcher/houses/",
    "https://dev.rozentalgroup.ru/demo/dispetcher/activeTreatments/",
    "https://dev.rozentalgroup.ru/demo/dispetcher/messenger/?section=active",
    "https://dev.rozentalgroup.ru/demo/dispetcher/treatments/paid/#/?section=paid",
    "https://dev.rozentalgroup.ru/demo/dispetcher/task-schedule/journal/?s=in_progress",
    "https://dev.rozentalgroup.ru/demo/dispetcher/task-schedule/",
    "https://dev.rozentalgroup.ru/demo/dispetcher/task-schedule/types/",
    "https://dev.rozentalgroup.ru/demo/dispetcher/easy-life/journal/?section=all",
    "https://dev.rozentalgroup.ru/demo/dispetcher/easy-life/messenger/?section=active",
    "https://dev.rozentalgroup.ru/demo/dispetcher/debtors/dashboard/",
    "https://dev.rozentalgroup.ru/demo/dispetcher/debtors/?list=all",
    "https://dev.rozentalgroup.ru/demo/dispetcher/debtors/analytics/",
    "https://dev.rozentalgroup.ru/demo/dispetcher/debtors/gis/",
    "https://dev.rozentalgroup.ru/demo/dispetcher/passes/?section=one-time",
    "https://dev.rozentalgroup.ru/demo/dispetcher/notifications/?s=active",
    "https://dev.rozentalgroup.ru/demo/dispetcher/inventory/",
    "https://dev.rozentalgroup.ru/demo/dispetcher/module_vote/?page=1&section=all#/",
    "https://dev.rozentalgroup.ru/demo/dispetcher/settings/?section=treatments",
    "https://dev.rozentalgroup.ru/demo/dispetcher/data_loading/",
    "https://testing.rozentalgroup.ru/demo/dispetcher/inventory/",
    "https://test.rozentalgroup.ru/demo/dispetcher/personal_accounts/?page=1&per_page=30",
    "https://abracadabra.vvv"
]

# üìÅ –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–æ–∫
CSV_FILE = "bad_links.csv"

# üßæ –•—Ä–∞–Ω–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
bad_pages = []

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
def send_telegram_message(text):
    if not BOT_TOKEN or not CHAT_ID:
        print("[‚ö†Ô∏è] BOT_TOKEN –∏–ª–∏ CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã.")
        return
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {"chat_id": CHAT_ID, "text": text}
    try:
        response = requests.post(url, data=payload)
        if response.status_code != 200:
            print(f"[Telegram ‚ùå] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.text}")
    except Exception as e:
        print(f"[Telegram ‚ùó] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –≤ Telegram
def send_telegram_file(file_path, caption="–§–∞–π–ª"):
    if not BOT_TOKEN or not CHAT_ID:
        return
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendDocument"
    try:
        with open(file_path, "rb") as f:
            response = requests.post(
                url,
                data={"chat_id": CHAT_ID, "caption": caption},
                files={"document": f}
            )
        if response.status_code != 200:
            print(f"[Telegram ‚ùå] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {response.text}")
    except Exception as e:
        print(f"[Telegram ‚ùó] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")

 –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö URL
#for url in URLS:
#    try:
#        driver.get(url)
#        if (
#            "404" in driver.title or
#            "–æ—à–∏–±–∫–∞" in driver.title.lower() or
#            "not found" in driver.page_source.lower()
#        ):
#            bad_pages.append([url, "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ", "–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –≤ title/page"])
#    except WebDriverException as e:
#        bad_pages.append([url, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã", str(e)])

for url in URLS:
    try:
        driver.get(url)
        page_source = driver.page_source.lower()
        title = driver.title.lower()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if (
            "404" in title
            or "–æ—à–∏–±–∫–∞" in title
            or "not found" in page_source
            or "error" in title
            or "500" in title
            or "502" in title
            or "503" in title
            or "bad gateway" in page_source
            or "service unavailable" in page_source
            or "internal server error" in page_source
            or "maintenance" in page_source
            or "under construction" in page_source
        ):
            bad_pages.append([url, "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ", "–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ"])

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—É—é –∏–ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–æ—Ç–∫—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        elif len(page_source.strip()) < 500:
            bad_pages.append([url, "–ü—É—Å—Ç–∞—è –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", f"–î–ª–∏–Ω–∞: {len(page_source)} —Å–∏–º–≤–æ–ª–æ–≤"])

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç –≤ URL
        elif "error" in driver.current_url.lower() or "404" in driver.current_url.lower():
            bad_pages.append([url, "–†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—à–∏–±–∫–∏", driver.current_url])

    except TimeoutException:
        bad_pages.append([url, "–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã", "TimeoutException"])
    except WebDriverException as e:
        bad_pages.append([url, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã", str(e)])
    except Exception as e:
        bad_pages.append([url, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞", str(e)])

# –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ CSV
try:
    with open(CSV_FILE, mode="w", newline="", encoding="Windows-1251") as f:
        writer = csv.writer(f)
        writer.writerow(["URL", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏", "–¢–∏–ø –æ—à–∏–±–∫–∏"])
        writer.writerows(bad_pages)
except PermissionError:
    print(f"[‚ùó] –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É {CSV_FILE}. –ó–∞–∫—Ä–æ–π—Ç–µ –µ–≥–æ, –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç.")

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è Telegram
total_checked = len(URLS)
total_errors = len(bad_pages)
total_ok = total_checked - total_errors
duration = round(time() - start_time, 2)

summary = f"""‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞

‚è± –í—Ä–µ–º—è: {duration} —Å–µ–∫
üîó –í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫: {total_checked}
‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {total_ok}
‚ùå –û—à–∏–±–æ–∫: {total_errors}
"""

for i, (url, _, error_type) in enumerate(bad_pages[:10], start=1):
    summary += f"\n{i}. {url}\n   ‚õî {error_type}"

if total_errors > 10:
    summary += f"\n...–∏ –µ—â—ë {total_errors - 10} –æ—à–∏–±–æ–∫ —Å–∫—Ä—ã—Ç–æ."

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
send_telegram_message(summary)
if total_errors > 0:
    send_telegram_file(CSV_FILE, caption="üìÑ –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")

driver.quit()


